"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.hide = hide;
exports.isVisible = isVisible;
exports.useHideAnimation = useHideAnimation;
var _react = require("react");
var _reactNative = require("react-native");
var _NativeRNBootSplash = _interopRequireDefault(require("./NativeRNBootSplash"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function hide(config = {}) {
  const {
    fade = false
  } = config;
  return _NativeRNBootSplash.default.hide(fade).then(() => {});
}
function isVisible() {
  return _NativeRNBootSplash.default.isVisible();
}
function useHideAnimation(config) {
  const {
    manifest,
    logo: logoSrc,
    darkLogo: darkLogoSrc,
    brand: brandSrc,
    darkBrand: darkBrandSrc,
    animate,
    statusBarTranslucent = false,
    navigationBarTranslucent = false
  } = config;
  const skipLogo = logoSrc == null;
  const skipBrand = manifest.brand == null || brandSrc == null;
  const logoWidth = manifest.logo.width;
  const logoHeight = manifest.logo.height;
  const brandBottom = manifest.brand?.bottom;
  const brandWidth = manifest.brand?.width;
  const brandHeight = manifest.brand?.height;
  const colorScheme = (0, _reactNative.useColorScheme)();
  const backgroundColor = colorScheme === "dark" && manifest.darkBackground != null ? manifest.darkBackground : manifest.background;
  const logoFinalSrc = skipLogo ? undefined : colorScheme === "dark" && darkLogoSrc != null ? darkLogoSrc : logoSrc;
  const brandFinalSrc = skipBrand ? undefined : colorScheme === "dark" && darkBrandSrc != null ? darkBrandSrc : brandSrc;
  const animateFn = (0, _react.useRef)(animate);
  const layoutReady = (0, _react.useRef)(false);
  const logoReady = (0, _react.useRef)(skipLogo);
  const brandReady = (0, _react.useRef)(skipBrand);
  const animateHasBeenCalled = (0, _react.useRef)(false);
  (0, _react.useEffect)(() => {
    animateFn.current = animate;
  });
  const maybeRunAnimate = (0, _react.useCallback)(() => {
    if (layoutReady.current && logoReady.current && brandReady.current && !animateHasBeenCalled.current) {
      animateHasBeenCalled.current = true;
      hide({
        fade: false
      }).then(() => animateFn.current()).catch(() => {});
    }
  }, []);
  return (0, _react.useMemo)(() => {
    const containerStyle = {
      ..._reactNative.StyleSheet.absoluteFillObject,
      backgroundColor,
      alignItems: "center",
      justifyContent: "center"
    };
    const container = {
      style: containerStyle,
      onLayout: () => {
        layoutReady.current = true;
        maybeRunAnimate();
      }
    };
    const logo = logoFinalSrc == null ? {
      source: -1
    } : {
      fadeDuration: 0,
      resizeMode: "contain",
      source: logoFinalSrc,
      style: {
        width: logoWidth,
        height: logoHeight
      },
      onLoadEnd: () => {
        logoReady.current = true;
        maybeRunAnimate();
      }
    };
    const brand = brandFinalSrc == null ? {
      source: -1
    } : {
      fadeDuration: 0,
      resizeMode: "contain",
      source: brandFinalSrc,
      style: {
        position: "absolute",
        bottom: _reactNative.Platform.OS === "web" ? 60 : brandBottom,
        width: brandWidth,
        height: brandHeight
      },
      onLoadEnd: () => {
        brandReady.current = true;
        maybeRunAnimate();
      }
    };
    if (_reactNative.Platform.OS !== "android") {
      return {
        container,
        logo,
        brand
      };
    }
    const {
      logoSizeRatio,
      navigationBarHeight,
      statusBarHeight
    } = _NativeRNBootSplash.default.getConstants();
    return {
      container: {
        ...container,
        style: {
          ...containerStyle,
          marginTop: statusBarTranslucent ? undefined : -statusBarHeight,
          marginBottom: navigationBarTranslucent ? undefined : -navigationBarHeight
        }
      },
      logo: {
        ...logo,
        style: {
          width: logoWidth * logoSizeRatio,
          height: logoHeight * logoSizeRatio
        }
      },
      brand
    };
  }, [maybeRunAnimate, logoWidth, logoHeight, brandBottom, brandWidth, brandHeight, backgroundColor, logoFinalSrc, brandFinalSrc, statusBarTranslucent, navigationBarTranslucent]);
}
var _default = exports.default = {
  hide,
  isVisible,
  useHideAnimation
};
//# sourceMappingURL=index.js.map