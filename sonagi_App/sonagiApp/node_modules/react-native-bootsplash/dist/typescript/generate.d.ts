import { CommandFunction } from "@react-native-community/cli-types";
import { Options as PrettierOptions } from "prettier";
import { Sharp } from "sharp";
import { XMLFormatterOptions } from "xml-formatter";
export type Color = {
    hex: string;
    rgb: {
        R: string;
        G: string;
        B: string;
    };
};
export declare const log: {
    error: (text: string) => void;
    text: (text: string) => void;
    title: (emoji: string, text: string) => void;
    warn: (text: string) => void;
};
export declare const logWrite: (filePath: string, dimensions?: {
    width: number;
    height: number;
}) => void;
export declare const writeJson: (file: string, json: object) => void;
export declare const readXml: (file: string) => {
    root: import("node-html-parser").HTMLElement;
    formatOptions: XMLFormatterOptions;
};
export declare const writeXml: (file: string, xml: string, options?: XMLFormatterOptions) => void;
export declare const readHtml: (file: string) => {
    root: import("node-html-parser").HTMLElement;
    formatOptions: PrettierOptions;
};
export declare const writeHtml: (file: string, html: string, options?: Omit<PrettierOptions, "parser" | "plugins">) => Promise<void>;
export type AddonConfig = {
    licenseKey: string;
    androidResPath: string | undefined;
    iosProjectPath: string | undefined;
    htmlTemplatePath: string | undefined;
    assetsOutputPath: string | undefined;
    logoPath: string;
    darkLogoPath: string | undefined;
    brandPath: string | undefined;
    darkBrandPath: string | undefined;
    logoHeight: number;
    logoWidth: number;
    brandHeight: number;
    brandWidth: number;
    background: Color;
    logo: Sharp;
    brand: Sharp | undefined;
    darkBackground: Color | undefined;
    darkLogo: Sharp | undefined;
    darkBrand: Sharp | undefined;
};
export declare const generate: CommandFunction<{
    platforms: string[];
    background: string;
    logoWidth: number;
    assetsOutput?: string;
    html: string;
    flavor: string;
    licenseKey?: string;
    brand?: string;
    brandWidth: number;
    darkBackground?: string;
    darkLogo?: string;
    darkBrand?: string;
}>;
//# sourceMappingURL=generate.d.ts.map